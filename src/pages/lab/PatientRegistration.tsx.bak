import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Search } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { 
  UserPlus, 
  ArrowLeft, 
  Receipt, 
  FileText, 
  Calculator, 
  X, 
  Check, 
  ChevronsUpDown, 
  Printer, 
  ChevronDown, 
  Loader2 
} from 'lucide-react';
import { demoTests } from '@/data/demoData';
import { useNavigate } from 'react-router-dom';
import { toast } from '@/hooks/use-toast';
import { addPatient } from '@/services/patientService';
import PrintBill from '@/components/PrintBill';
import ReactDOM from 'react-dom/client';

interface PrintBillProps {
  patient: any;
  patientId: string;
  totalAmount: number;
  demoTests: any[];
}

const PrintBill = React.forwardRef<HTMLDivElement, PrintBillProps>(({ patient, patientId, totalAmount, demoTests }, ref) => {
  const currentDate = new Date().toLocaleDateString('en-IN');
  const currentTime = new Date().toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' });
  
  return (
    <div ref={ref} className="p-6">
      <div className="flex justify-between items-center mb-6 border-b pb-4">
        <div>
          <h2 className="text-2xl font-bold">Lab Manager Pro</h2>
          <p className="text-sm text-gray-600">123 Lab Street, City, State</p>
          <p className="text-sm text-gray-600">Phone: +91 1234567890</p>
        </div>
        <div className="text-right">
          <p className="font-semibold">Bill No: {patientId || 'N/A'}</p>
          <p className="text-sm">Date: {currentDate}</p>
          <p className="text-sm">Time: {currentTime}</p>
        </div>
      </div>
      
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">Patient Details</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><span className="font-medium">Name:</span> {patient.name}</p>
            <p><span className="font-medium">Age/Gender:</span> {patient.age} / {patient.gender}</p>
            <p><span className="font-medium">Phone:</span> {patient.phone}</p>
          </div>
          <div>
            <p><span className="font-medium">Doctor:</span> {patient.doctor || 'N/A'}</p>
            <p><span className="font-medium">Date:</span> {currentDate}</p>
            <p><span className="font-medium">Time:</span> {currentTime}</p>
          </div>
        </div>
      </div>

      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">Tests</h3>
        <table className="w-full border-collapse">
          <thead>
            <tr className="bg-gray-100">
              <th className="border p-2 text-left">Test Name</th>
              <th className="border p-2 text-right">Amount (₹)</th>
            </tr>
          </thead>
          <tbody>
            {patient.selectedTests.map((testId: string) => {
              const test = demoTests.find((t: any) => t.id === testId);
              return test ? (
                <tr key={testId}>
                  <td className="border p-2">{test.name}</td>
                  <td className="border p-2 text-right">{test.price.toFixed(2)}</td>
                </tr>
              ) : null;
            })}
            <tr className="font-semibold">
              <td className="border p-2 text-right">Total:</td>
              <td className="border p-2 text-right">₹{totalAmount.toFixed(2)}</td>
            </tr>
          </tbody>
        </table>
      </div>

      <div className="mt-8 pt-4 border-t border-gray-300 text-sm">
        <p className="mb-2"><span className="font-medium">Notes:</span> Report will be available within 24 hours.</p>
        <p className="mb-2"><span className="font-medium">Terms & Conditions:</span></p>
        <ul className="list-disc pl-5 space-y-1">
          <li>Report collection time will be informed via SMS.</li>
          <li>Please bring this bill at the time of report collection.</li>
          <li>For any queries, contact our customer care.</li>
        </ul>
      </div>

      <div className="mt-8 text-center text-sm">
        <p>Thank you for choosing us!</p>
        <p className="mt-2">** This is a computer generated bill **</p>
      </div>
    </div>
  );
});

PrintBill.displayName = 'PrintBill';

// Print Component
const PrintBill = React.forwardRef(({ patient, patientId, totalAmount }, ref) => {
  const currentDate = new Date().toLocaleDateString('en-IN');
  const currentTime = new Date().toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' });
  
  return (
    <div ref={ref} className="p-6">
      <div className="flex justify-between items-center mb-6 border-b pb-4">
        <div>
          <h2 className="text-2xl font-bold">Lab Manager Pro</h2>
          <p className="text-sm text-gray-600">123 Lab Street, City, State</p>
          <p className="text-sm text-gray-600">Phone: +91 1234567890</p>
        </div>
        <div className="text-right">
          <p className="font-semibold">Bill No: {patientId || 'N/A'}</p>
          <p className="text-sm">Date: {currentDate}</p>
          <p className="text-sm">Time: {currentTime}</p>
        </div>
      </div>
      
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">Patient Details</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><span className="font-medium">Name:</span> {patient.name}</p>
            <p><span className="font-medium">Age/Gender:</span> {patient.age} / {patient.gender}</p>
            <p><span className="font-medium">Phone:</span> {patient.phone}</p>
          </div>
          <div>
            <p><span className="font-medium">Doctor:</span> {patient.doctor || 'N/A'}</p>
            <p><span className="font-medium">Date:</span> {currentDate}</p>
            <p><span className="font-medium">Time:</span> {currentTime}</p>
          </div>
        </div>
      </div>

      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">Tests</h3>
        <table className="w-full border-collapse">
          <thead>
            <tr className="bg-gray-100">
              <th className="border p-2 text-left">Test Name</th>
              <th className="border p-2 text-right">Amount (₹)</th>
            </tr>
          </thead>
          <tbody>
            {patient.selectedTests.map(testId => {
              const test = demoTests.find(t => t.id === testId);
              return test ? (
                <tr key={testId}>
                  <td className="border p-2">{test.name}</td>
                  <td className="border p-2 text-right">{test.price.toFixed(2)}</td>
                </tr>
              ) : null;
            })}
            <tr className="font-semibold">
              <td className="border p-2 text-right">Total:</td>
              <td className="border p-2 text-right">₹{totalAmount.toFixed(2)}</td>
            </tr>
          </tbody>
        </table>
      </div>

      <div className="mt-8 pt-4 border-t border-gray-300 text-sm">
        <p className="mb-2"><span className="font-medium">Notes:</span> Report will be available within 24 hours.</p>
        <p className="mb-2"><span className="font-medium">Terms & Conditions:</span></p>
        <ul className="list-disc pl-5 space-y-1">
          <li>Report collection time will be informed via SMS.</li>
          <li>Please bring this bill at the time of report collection.</li>
          <li>For any queries, contact our customer care.</li>
        </ul>
      </div>

      <div className="mt-8 text-center text-sm">
        <p>Thank you for choosing us!</p>
        <p className="mt-2">** This is a computer generated bill **</p>
      </div>
    </div>
  );
});

PrintBill.displayName = 'PrintBill';

type Gender = 'Male' | 'Female' | 'Other';

interface PatientForm {
  name: string;
  age: string;
  dob: string;
  gender: Gender | '';
  phone: string;
  doctor: string;
  address: string;
  city: string;
  state: string;
  pincode: string;
  selectedTests: string[];
  registrationDate: Date;
}

// Indian states and cities data
const indianStates = [
  'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
  'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand', 'Karnataka',
  'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram',
  'Nagaland', 'Odisha', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu',
  'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal'
];

const cityByState: Record<string, string[]> = {
  'Maharashtra': ['Mumbai', 'Pune', 'Nagpur', 'Nashik', 'Aurangabad', 'Solapur', 'Amravati'],
  'Delhi': ['New Delhi', 'Delhi Cantonment', 'Narela', 'Najafgarh'],
  'Karnataka': ['Bangalore', 'Mysore', 'Mangalore', 'Hubli', 'Belgaum', 'Gulbarga'],
  'Tamil Nadu': ['Chennai', 'Coimbatore', 'Madurai', 'Tiruchirappalli', 'Salem', 'Tirunelveli'],
  'Uttar Pradesh': ['Lucknow', 'Kanpur', 'Varanasi', 'Agra', 'Meerut', 'Allahabad'],
  'Gujarat': ['Ahmedabad', 'Surat', 'Vadodara', 'Rajkot', 'Bhavnagar', 'Jamnagar'],
  'Rajasthan': ['Jaipur', 'Jodhpur', 'Udaipur', 'Kota', 'Ajmer', 'Bikaner'],
  'West Bengal': ['Kolkata', 'Howrah', 'Durgapur', 'Asansol', 'Siliguri', 'Bardhaman'],
  'Kerala': ['Thiruvananthapuram', 'Kochi', 'Kozhikode', 'Thrissur', 'Kollam', 'Alappuzha'],
  'Punjab': ['Chandigarh', 'Ludhiana', 'Amritsar', 'Jalandhar', 'Patiala', 'Bathinda'],
  'Bihar': [
    'Patna', 'Gaya', 'Bhagalpur', 'Muzaffarpur', 'Darbhanga', 'Arrah', 'Begusarai',
    'Chhapra', 'Katihar', 'Munger', 'Purnia', 'Saharsa', 'Sasaram', 'Hajipur',
    'Siwan', 'Samastipur', 'Motihari', 'Bettiah', 'Dehri', 'Nawada', 'Bagaha',
    'Buxar', 'Kishanganj', 'Sitamarhi', 'Jamalpur', 'Jehanabad', 'Aurangabad',
    'Biharsharif', 'Lakhisarai', 'Jamui', 'Araria', 'Madhepura', 'Supaul',
    'Sheikhpura', 'Sheohar', 'Arwal', 'Banka', 'Khagaria', 'Madhubani',
    'Saharsa', 'Supaul', 'Vaishali'
  ]
};

// Add remaining states with empty arrays if needed
indianStates.forEach(state => {
  if (!cityByState[state]) {
    cityByState[state] = [];
  }
});

// Function to generate patient ID
const generatePatientId = (prefix: string): string => {
  const now = new Date();
  const dateStr = now.toISOString().slice(2, 10).replace(/-/g, '');
  const countKey = `patientCount_${prefix}_${dateStr}`;
  let count = parseInt(localStorage.getItem(countKey) || '0', 10) + 1;
  localStorage.setItem(countKey, count.toString());
  
  return `${prefix}-${dateStr}-${String(count).padStart(4, '0')}`;
};

const PatientRegistration: React.FC = () => {
  const navigate = useNavigate();
  const [patient, setPatient] = useState<PatientForm>({
    name: '',
    age: '',
    dob: '',
    gender: '',
    phone: '',
    doctor: '',
    address: '',
    city: '',
    state: '',
    pincode: '',
    selectedTests: [],
    registrationDate: new Date()
  });
  
  const [patientId, setPatientId] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showBillDialog, setShowBillDialog] = useState(false);
  const [cities, setCities] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  
  // Hospital prefix - in a real app, this would come from the logged-in hospital's data
  const hospitalPrefix = 'SWT';

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Update cities when state changes
  useEffect(() => {
    if (patient.state) {
      setCities(cityByState[patient.state] || []);
      setPatient(prev => ({ ...prev, city: '' }));
    }
  }, [patient.state]);

  const calculateAge = (dob: string) => {
    if (!dob) return '';
    const birthDate = new Date(dob);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    return age.toString();
  };

  const isDobEmpty = () => {
    const day = (document.getElementById('day') as HTMLInputElement)?.value;
    const month = (document.getElementById('month') as HTMLInputElement)?.value;
    const year = (document.getElementById('year') as HTMLInputElement)?.value;
    return !day && !month && !year;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    // Skip handling for date parts as they are handled by onBlur
    if (['day', 'month', 'year'].includes(name)) {
      return;
    }
    
    // If age is being updated and DOB is empty, allow manual entry
    if (name === 'age' && (isDobEmpty() || !patient.dob)) {
      setPatient(prev => ({
        ...prev,
        [name]: value,
        dob: '' // Clear DOB when age is manually entered
      }));
      return;
    }
    
    setPatient(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSelectChange = (name: keyof PatientForm, value: string) => {
    setPatient(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleTestSelection = (testId: string, checked: boolean) => {
    setPatient(prev => ({
      ...prev,
      selectedTests: checked 
        ? [...prev.selectedTests, testId]
        : prev.selectedTests.filter(id => id !== testId)
    }));
  };

  const calculateTotal = () => {
    return patient.selectedTests.reduce((total, testId) => {
      const test = demoTests.find(t => t.id === testId);
      return total + (test?.price || 0);
    }, 0);
  };

  const handleSubmit = async (e: React.FormEvent, isBillGenerate: boolean = false) => {
    e.preventDefault();
    
    if (!isBillGenerate && (!patient.name || !patient.phone || !patient.gender)) {
      toast({
        title: 'Validation Error',
        description: 'Please fill in all required fields',
        variant: 'destructive',
      });
      return;
    }
    
    if (isBillGenerate && patient.selectedTests.length === 0) {
      toast({
        title: 'No Tests Selected',
        description: 'Please select at least one test to generate a bill',
        variant: 'destructive',
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      if (isBillGenerate) {
        // Just show the bill dialog if we're only generating a bill
        setShowBillDialog(true);
        return;
      }
      
      // Generate patient ID
      const newPatientId = generatePatientId(hospitalPrefix);
      
      // Prepare patient data for Firestore
      const patientData = {
        id: newPatientId,
        name: patient.name,
        age: parseInt(patient.age) || 0,
        gender: patient.gender as Gender,
        phone: patient.phone,
        address: patient.address,
        city: patient.city,
        state: patient.state,
        pincode: patient.pincode,
        doctor: patient.doctor,
        registrationDate: new Date(),
        lastVisit: new Date(),
        balance: 0, // Initial balance
        status: 'active' as const,
        tests: patient.selectedTests,
      };
      
      // Save to Firestore
      await addPatient(patientData);
      
      // Set the patient ID for display
      setPatientId(newPatientId);
      
      // Show success message
      toast({
        title: 'Patient registered successfully!',
        description: `Patient ID: ${newPatientId}`,
        variant: 'default',
      });
      
      // Show bill dialog if tests are selected
      if (patient.selectedTests.length > 0) {
        setShowBillDialog(true);
      }
      
      // Reset form if not just generating a bill
      if (!isBillGenerate) {
        setPatient({
          name: '',
          age: '',
          dob: '',
          gender: '',
          phone: '',
          doctor: '',
          address: '',
          city: '',
          state: '',
          pincode: '',
          selectedTests: [],
          registrationDate: new Date()
        });
      }
      
    } catch (error) {
      console.error('Error saving patient:', error);
      toast({
        title: 'Error',
        description: isBillGenerate ? 'Failed to generate bill. Please try again.' : 'Failed to save patient. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const PrintBill = React.forwardRef<HTMLDivElement>((props, ref) => {
    const totalAmount = calculateTotal();
    const currentDate = new Date().toLocaleDateString('en-IN');
    const currentTime = new Date().toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' });
    
    return (
      <div ref={ref} className="p-6 print:p-0 print:block">
        <div className="flex justify-between items-center mb-6 border-b pb-4 print:border-b-2 print:border-gray-800">
          <div>
            <h2 className="text-2xl font-bold">Lab Manager Pro</h2>
            <p className="text-sm text-gray-600">123 Lab Street, City, State</p>
            <p className="text-sm text-gray-600">Phone: +91 1234567890</p>
          </div>
          <div className="text-right">
            <p className="font-semibold">Bill No: {patientId || 'N/A'}</p>
            <p className="text-sm">Date: {currentDate}</p>
            <p className="text-sm">Time: {currentTime}</p>
          </div>
        </div>
        
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">Patient Details</h3>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <p><span className="font-medium">Name:</span> {patient.name}</p>
              <p><span className="font-medium">Age/Gender:</span> {patient.age} / {patient.gender}</p>
              <p><span className="font-medium">Phone:</span> {patient.phone}</p>
            </div>
            <div>
              <p><span className="font-medium">Doctor:</span> {patient.doctor || 'N/A'}</p>
              <p><span className="font-medium">Date:</span> {currentDate}</p>
              <p><span className="font-medium">Time:</span> {currentTime}</p>
            </div>
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">Tests</h3>
          <table className="w-full border-collapse">
            <thead>
              <tr className="bg-gray-100">
                <th className="border p-2 text-left">Test Name</th>
                <th className="border p-2 text-right">Amount (₹)</th>
              </tr>
            </thead>
            <tbody>
              {patient.selectedTests.map(testId => {
                const test = demoTests.find(t => t.id === testId);
                return test ? (
                  <tr key={testId}>
                    <td className="border p-2">{test.name}</td>
                    <td className="border p-2 text-right">{test.price.toFixed(2)}</td>
                  </tr>
                ) : null;
              })}
              <tr className="font-semibold">
                <td className="border p-2 text-right">Total:</td>
                <td className="border p-2 text-right">₹{totalAmount.toFixed(2)}</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div className="mt-8 pt-4 border-t border-gray-300 text-sm">
          <p className="mb-2"><span className="font-medium">Notes:</span> Report will be available within 24 hours.</p>
          <p className="mb-2"><span className="font-medium">Terms & Conditions:</span></p>
          <ul className="list-disc pl-5 space-y-1">
            <li>Report collection time will be informed via SMS.</li>
            <li>Please bring this bill at the time of report collection.</li>
            <li>For any queries, contact our customer care.</li>
          </ul>
        </div>

        <div className="mt-8 text-center text-sm">
          <p>Thank you for choosing us!</p>
          <p className="mt-2">** This is a computer generated bill **</p>
        </div>
      </div>
    );
  });

  const handlePrintBill = () => {
    const printWindow = window.open('', '', 'width=800,height=1000');
    if (printWindow) {
      const printContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <title>Bill - ${patientId || 'New Bill'}</title>
            <style>
              @page { size: auto; margin: 10mm; }
              body { font-family: Arial, sans-serif; line-height: 1.5; }
              table { width: 100%; border-collapse: collapse; margin: 10px 0; }
              th, td { border: 1px solid #000; padding: 8px; text-align: left; }
              .text-right { text-align: right; }
              .text-center { text-align: center; }
              .font-medium { font-weight: 500; }
              .font-semibold { font-weight: 600; }
              .font-bold { font-weight: 700; }
              .border-b-2 { border-bottom-width: 2px; }
              .border-gray-800 { border-color: #1f2937; }
              .border-t { border-top: 1px solid #e5e7eb; }
              .border-gray-300 { border-color: #d1d5db; }
              .list-disc { list-style-type: disc; }
              .pl-5 { padding-left: 1.25rem; }
              .space-y-1 > * + * { margin-top: 0.25rem; }
              .space-y-2 > * + * { margin-top: 0.5rem; }
              .space-y-4 > * + * { margin-top: 1rem; }
              .mb-2 { margin-bottom: 0.5rem; }
              .mb-4 { margin-bottom: 1rem; }
              .mb-6 { margin-bottom: 1.5rem; }
              .mt-2 { margin-top: 0.5rem; }
              .mt-8 { margin-top: 2rem; }
              .p-2 { padding: 0.5rem; }
              .p-6 { padding: 1.5rem; }
              .pb-4 { padding-bottom: 1rem; }
              .pt-4 { padding-top: 1rem; }
              .text-sm { font-size: 0.875rem; }
              .text-lg { font-size: 1.125rem; }
              .text-xl { font-size: 1.25rem; }
              .text-2xl { font-size: 1.5rem; }
              .text-gray-600 { color: #4b5563; }
              .grid { display: grid; }
              .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
              .gap-4 { gap: 1rem; }
              .w-full { width: 100%; }
              .flex { display: flex; }
              .justify-between { justify-content: space-between; }
              .items-center { align-items: center; }
              @media print {
                body { -webkit-print-color-adjust: exact; }
                .no-print { display: none !important; }
              }
            </style>
          </head>
          <body>
            <div>${document.getElementById('print-bill')?.innerHTML || 'No content to print'}</div>
            <script>
              window.onload = function() {
                window.print();
                window.onafterprint = function() {
                  window.close();
                };
              };
            </script>
          </body>
        </html>
      `;
      
      printWindow.document.open();
      printWindow.document.write(printContent);
      printWindow.document.close();
      
      // Add the print bill content to the current page (hidden)
      const printBillElement = document.createElement('div');
      printBillElement.id = 'print-bill';
      printBillElement.className = 'hidden';
      document.body.appendChild(printBillElement);
      
      // Render the print bill component
      const root = ReactDOM.createRoot(printBillElement);
      root.render(<PrintBill />);
      
      // Clean up after printing
    toast({
      title: "Error",
      description: "Could not open print window. Please check your popup blocker settings.",
      variant: "destructive",
    });
    return;
  }

  const totalAmount = calculateTotal();
  const printContent = `
    <!DOCTYPE html>
    <html>
      <head>
        <title>Bill - ${patientId || 'New Bill'}</title>
        <style>
          @page { size: auto; margin: 10mm; }
          body { font-family: Arial, sans-serif; line-height: 1.5; }
          table { width: 100%; border-collapse: collapse; margin: 10px 0; }
          th, td { border: 1px solid #000; padding: 8px; text-align: left; }
          .text-right { text-align: right; }
          .text-center { text-align: center; }
          .font-medium { font-weight: 500; }
          .font-semibold { font-weight: 600; }
          .font-bold { font-weight: 700; }
          .border { border: 1px solid #000; }
          .border-t { border-top: 1px solid #e5e7eb; }
          .list-disc { list-style-type: disc; }
          .pl-5 { padding-left: 1.25rem; }
          .mb-2 { margin-bottom: 0.5rem; }
          .mb-4 { margin-bottom: 1rem; }
          .mb-6 { margin-bottom: 1.5rem; }
          .mt-2 { margin-top: 0.5rem; }
          .mt-8 { margin-top: 2rem; }
          .p-2 { padding: 0.5rem; }
          .p-6 { padding: 1.5rem; }
          .pb-4 { padding-bottom: 1rem; }
          .pt-4 { padding-top: 1rem; }
          .text-sm { font-size: 0.875rem; }
          .text-lg { font-size: 1.125rem; }
          .text-2xl { font-size: 1.5rem; }
          .text-gray-600 { color: #4b5563; }
          .w-full { width: 100%; }
          .flex { display: flex; }
          .justify-between { justify-content: space-between; }
          .items-center { align-items: center; }
          .bg-gray-100 { background-color: #f3f4f6; }
          .space-y-1 > * + * { margin-top: 0.25rem; }
          .space-y-2 > * + * { margin-top: 0.5rem; }
          .grid { display: grid; }
          .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
          .gap-4 { gap: 1rem; }
        </style>
      </head>
      <body>
        <div id="print-content"></div>
        <script>
          const content = document.getElementById('print-content');
          const bill = document.createElement('div');
          bill.innerHTML = ${JSON.stringify(ReactDOMServer.renderToString(
            <PrintBill 
              patient={patient} 
              patientId={patientId} 
              totalAmount={totalAmount}
              demoTests={demoTests}
            />
          )};
          content.appendChild(bill);
          window.print();
          window.onafterprint = function() {
            window.close();
          };
        </script>

const PrintBill = React.forwardRef<HTMLDivElement>((props, ref) => {
  const totalAmount = calculateTotal();
  const currentDate = new Date().toLocaleDateString('en-IN');
  const currentTime = new Date().toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' });
  
  return (
    <div ref={ref} className="p-6 print:p-0 print:block">
      <div className="flex justify-between items-center mb-6 border-b pb-4 print:border-b-2 print:border-gray-800">
        <div>
          <h2 className="text-2xl font-bold">Lab Manager Pro</h2>
          <p className="text-sm text-gray-600">123 Lab Street, City, State</p>
          <p className="text-sm text-gray-600">Phone: +91 1234567890</p>
      <div className="mx-auto px-2 sm:px-4 py-4 max-w-[1800px]">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <Button variant="ghost" size="sm" onClick={() => navigate(-1)} className="flex items-center gap-1 h-8 px-2">
            <ArrowLeft className="h-4 w-4" />
            Back
          </Button>
          <h1 className="text-2xl font-bold">Patient Registration</h1>
          <div className="w-20"></div> {/* For alignment */}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          {/* Patient Form */}
          <div className="lg:col-span-2">
            <Card className="shadow-sm border-0">
              <CardHeader className="p-4 border-b">
                <CardTitle className="text-lg">Patient Details</CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                <form onSubmit={(e) => handleSubmit(e, false)}>
                  <div className="space-y-4">
                    {/* Row 1 - Name, Age, Gender */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="name">Full Name <span className="text-red-500">*</span></Label>
                        <Input
                          id="name"
                          name="name"
                          value={patient.name}
                          onChange={handleInputChange}
                          placeholder="Enter patient's full name"
                          required
                          className="w-full"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="dob">Date of Birth <span className="text-muted-foreground text-xs">(DD/MM/YYYY)</span></Label>
                        <div className="flex gap-2">
                          <Input
                            id="day"
                            name="day"
                            type="number"
                            min="1"
                            max="31"
                            placeholder="DD"
                            className="w-16 text-center"
                            onKeyDown={(e) => {
                              if (e.key === 'Tab') {
                                e.preventDefault();
                                if (!e.shiftKey) {
                                  document.getElementById('month')?.focus();
                                } else {
                                  // If shift+tab, move to previous field
                                  document.getElementById('name')?.focus();
                                }
                              } else if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                document.getElementById('month')?.focus();
                              }
                            }}
                            onBlur={(e) => {
                              const day = e.target.value.padStart(2, '0');
                              const month = (document.getElementById('month') as HTMLInputElement)?.value.padStart(2, '0') || '01';
                              const year = (document.getElementById('year') as HTMLInputElement)?.value || new Date().getFullYear();
                              const newDate = `${year}-${month}-${day}`;
                              if (day && month && year) {
                                setPatient(prev => ({
                                  ...prev,
                                  dob: newDate,
                                  age: calculateAge(newDate)
                                }));
                              }
                            }}
                          />
                          <span className="flex items-center">/</span>
                          <Input
                            id="month"
                            name="month"
                            type="number"
                            min="1"
                            max="12"
                            placeholder="MM"
                            className="w-16 text-center"
                            onKeyDown={(e) => {
                              if (e.key === 'Tab') {
                                e.preventDefault();
                                if (!e.shiftKey) {
                                  document.getElementById('year')?.focus();
                                } else {
                                  document.getElementById('day')?.focus();
                                }
                              } else if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                document.getElementById('year')?.focus();
                              }
                            }}
                            onBlur={(e) => {
                              const day = (document.getElementById('day') as HTMLInputElement)?.value.padStart(2, '0') || '01';
                              const month = e.target.value.padStart(2, '0');
                              const year = (document.getElementById('year') as HTMLInputElement)?.value || new Date().getFullYear();
                              const newDate = `${year}-${month}-${day}`;
                              if (day && month && year) {
                                setPatient(prev => ({
                                  ...prev,
                                  dob: newDate,
                                  age: calculateAge(newDate)
                                }));
                              }
                            }}
                          />
                          <span className="flex items-center">/</span>
                          <Input
                            id="year"
                            name="year"
                            type="number"
                            min="1900"
                            max={new Date().getFullYear()}
                            placeholder="YYYY"
                            className="w-20"
                            onKeyDown={(e) => {
                              if (e.key === 'Tab') {
                                e.preventDefault();
                                if (!e.shiftKey) {
                                  document.getElementById('age')?.focus();
                                } else {
                                  document.getElementById('month')?.focus();
                                }
                              }
                            }}
                            onBlur={(e) => {
                              const day = (document.getElementById('day') as HTMLInputElement)?.value.padStart(2, '0') || '01';
                              const month = (document.getElementById('month') as HTMLInputElement)?.value.padStart(2, '0') || '01';
                              const year = e.target.value;
                              const newDate = `${year}-${month}-${day}`;
                              if (day && month && year) {
                                setPatient(prev => ({
                                  ...prev,
                                  dob: newDate,
                                  age: calculateAge(newDate)
                                }));
                              }
                            }}
                          />
                        </div>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="age">Age</Label>
                        <Input
                          id="age"
                          name="age"
                          type="number"
                          min="0"
                          max="120"
                          value={patient.age}
                          onChange={handleInputChange}
                          placeholder={isDobEmpty() ? 'Enter age' : 'Auto-calculated'}
                          className="w-full"
                          readOnly={!isDobEmpty()}
                          onKeyDown={(e) => {
                            if (e.key === 'Tab') {
                              e.preventDefault();
                              document.getElementById('gender-trigger')?.focus();
                            }
                          }}
                        />
                      </div>
                    </div>

                    {/* Row 2 - Gender, Phone, Referred By */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="gender">Gender <span className="text-red-500">*</span></Label>
                        <Select
                          value={patient.gender}
                          onValueChange={(value) => handleSelectChange('gender', value)}
                          required
                        >
                          <SelectTrigger id="gender-trigger" className="w-full">
                            <SelectValue placeholder="Select gender" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Male">Male</SelectItem>
                            <SelectItem value="Female">Female</SelectItem>
                            <SelectItem value="Other">Other</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="phone">Phone Number <span className="text-red-500">*</span></Label>
                        <Input
                          id="phone"
                          name="phone"
                          type="tel"
                          value={patient.phone}
                          onChange={handleInputChange}
                          placeholder="Enter phone number"
                          required
                          className="w-full"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="doctor">Referred By (Doctor)</Label>
                        <Input
                          id="doctor"
                          name="doctor"
                          value={patient.doctor}
                          onChange={handleInputChange}
                          placeholder="Doctor's name (if any)"
                          className="w-full"
                        />
                      </div>
                    </div>


                    {/* Row 4 - State, City, Pincode */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">

                    {/* State and City fields are now part of the grid */}
                      <div className="space-y-2">
                        <Label htmlFor="state">State</Label>
                        <Select
                          value={patient.state}
                          onValueChange={(value) => handleSelectChange('state', value)}
                        >
                          <SelectTrigger className="w-full">
                            <SelectValue placeholder="Select state" />
                          </SelectTrigger>
                          <SelectContent>
                            {indianStates.map((state) => (
                              <SelectItem key={state} value={state}>
                                {state}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="city">City</Label>
                        <Select
                          value={patient.city}
                          onValueChange={(value) => handleSelectChange('city', value)}
                          disabled={!patient.state}
                        >
                          <SelectTrigger className="w-full">
                            <SelectValue placeholder={patient.state ? 'Select city' : 'Select state first'} />
                          </SelectTrigger>
                          <SelectContent>
                            {cities.length > 0 ? (
                              cities.map((city) => (
                                <SelectItem key={city} value={city}>
                                  {city}
                                </SelectItem>
                              ))
                            ) : (
                              <div className="p-2 text-sm text-muted-foreground">
                                {patient.state ? 'No cities available' : 'Select a state first'}
                              </div>
                            )}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    {/* Address (Full width) */}
                    <div className="space-y-2">
                      <Label htmlFor="address">Address</Label>
                      <textarea
                        id="address"
                        name="address"
                        value={patient.address}
                        onChange={handleInputChange}
                        placeholder="Enter full address"
                        className="flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 min-h-[100px]"
                      />
                    </div>
                  </div>

                  {/* Test Selection */}
                  <div className="mt-6 mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="text-sm font-medium">Select Tests</h3>
                      <div className="relative w-64">
                        <Input
                          placeholder="Search tests..."
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                          className="pl-8"
                        />
                        <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                      </div>
                    </div>
                    
                    <div className="border rounded-md h-48 overflow-y-auto p-2">
                      {demoTests
                        .filter(test => 
                          test.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          test.category.toLowerCase().includes(searchQuery.toLowerCase())
                        )
                        .map((test) => (
                          <div key={test.id} className="flex items-center space-x-2 p-1 hover:bg-muted/50 rounded">
                            <Checkbox
                              id={`test-${test.id}`}
                              checked={patient.selectedTests.includes(test.id)}
                              onCheckedChange={(checked) => handleTestSelection(test.id, checked as boolean)}
                            />
                            <label
                              htmlFor={`test-${test.id}`}
                              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex-1"
                            >
                              {test.name}
                              <span className="text-xs text-muted-foreground block">{test.category}</span>
                            </label>
                            <span className="text-sm font-medium">₹{test.price}</span>
                          </div>
                        ))}
                    </div>
                  </div>

                  <div className="flex flex-col sm:flex-row gap-2 mt-6">
                    <Button 
                      type="submit"
                      className="w-full"
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Registering...
                        </>
                      ) : (
                        <>
                          <UserPlus className="w-4 h-4 mr-2" />
                          Register Patient
                        </>
                      )}
                    </Button>
                    <Button 
                      type="button"
                      className="w-full bg-gradient-medical hover:opacity-90"
                      onClick={(e) => handleSubmit(e as unknown as React.FormEvent, true)}
                      disabled={patient.selectedTests.length === 0 || isSubmitting}
                    >
                      <Receipt className="w-4 h-4 mr-2" />
                      Generate Bill
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Bill Preview */}
          <div className="sticky top-4">
            <Card className="shadow-sm border-0">
              <CardHeader className="p-3 bg-muted/20">
                <CardTitle className="text-sm font-medium">Selected Tests</CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                {patient.selectedTests.length === 0 ? (
                  <p className="text-sm text-muted-foreground text-center py-4">
                    No tests selected yet. Select tests from the form.
                  </p>
                ) : (
                  <div className="space-y-2">
                    {patient.selectedTests.map(testId => {
                      const test = demoTests.find(t => t.id === testId);
                      if (!test) return null;
                      
                      return (
                        <div key={testId} className="flex justify-between items-center text-sm">
                          <span className="line-clamp-1">{test.name}</span>
                          <span className="font-medium">₹{test.price}</span>
                        </div>
                      );
                    })}
                    <div className="border-t mt-3 pt-2 flex justify-between font-medium">
                      <span>Total</span>
                      <span>₹{calculateTotal()}</span>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Bill Dialog */}
      <Dialog open={showBillDialog} onOpenChange={setShowBillDialog}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Bill for {patient.name || 'New Patient'}</DialogTitle>
            <DialogDescription>
              Patient ID: {patientId || 'N/A'}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-muted-foreground">Date</p>
                <p>{new Date().toLocaleDateString()}</p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Time</p>
                <p>{new Date().toLocaleTimeString()}</p>
              </div>
            </div>
            
            <div className="border-t pt-4">
              <div className="space-y-2">
                {patient.selectedTests.map(testId => {
                  const test = demoTests.find(t => t.id === testId);
                  if (!test) return null;
                  
                  return (
                    <div key={testId} className="flex justify-between">
                      <span>{test.name}</span>
                      <span>₹{test.price}</span>
                    </div>
                  );
                })}
              </div>
              
              <div className="border-t mt-4 pt-2 flex justify-between font-medium">
                <span>Total</span>
                <span>₹{calculateTotal()}</span>
              </div>
            </div>
          </div>
          
          <DialogFooter className="sm:justify-between">
            <Button variant="outline" onClick={() => setShowBillDialog(false)}>
              Close
            </Button>
            <div className="flex gap-2">
              <Button variant="outline" onClick={handlePrintBill}>
                <Printer className="h-4 w-4 mr-2" />
                Print Bill
              </Button>
              <Button onClick={handleCollectSubmit}>
                <FileText className="h-4 w-4 mr-2" />
                Collect Sample
              </Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PatientRegistration;
